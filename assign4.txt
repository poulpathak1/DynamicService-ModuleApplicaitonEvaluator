Assign4: Due 11:59PM April 17

Please take small steps. Start with a canary test and one or two more tests.
List your tests in a file named tests.txt. Check them off with a x as you 
implement them. Remember to ask for a review each day. The earlier you start,
the earlier you finish, and less the risk. If you start late, you carry a 
bigger risk. I sincerely hope you will start early and come out winning in 
this course.

Using test first development, write the program described below.

An agency specializes in evaluating job applicants. Different clients using their service will want applicants to be evaluated based on different criteria. New criteria not known today may be added in the future. Some existing criteria may also be removed at any time. Not all available criteria will be used by every client.

Examples of criteria are employment status, criminal records, credit records, Security clearance, etc. For example, the employment status criterion will return a response of its evaluation with a status and reason, like so: pass, "applicant has had previous employment." As another example, the criminal records criterion may respond fail, "person has done time for bank robbery."

For the purpose of this assignment, we will fake some response in each of the criteria when an evaluation is requested for applicants.

Write a console application that will allow the user of the program to first choose the criteria they want to use, from a dynamic list of available criteria. Then evaluate the application for all the selected criteria. Finally the program will print the total result, pass or fail (pass only if all criteria passed) and provide a summary of the evaluations for that applicant. 

Once you complete coding, please answer the following:

1. What design principles did you use in this assignment? Discuss.

We followed the Open-Closed Principle, which essentially states that functions,  classes, and other software modules should be extensible but at the same time, you aren't modifying the source code. We applied this in our Criteria function. We could have had multiple functions that would evalaute different criteria such as a function for 3 criteria, a function for 2, and a function for 1. That would require programming a new function everytime there was a new criteria.

We used the Don't Repeat Yourself principle when we followed the OCP. If we hadn't followed OCP then we would have redundant. The DRY priciple helped us minimize code for our testing and reduce noise in our code.

We also followed the Single Responsibility Principle(SRP) where there was an interface for each background check type (eg. criminalCheck, citizenship status, creditCheck, etc) so that we can separate concerns. Separating concerns has helped us keep code clean and easier to maintain. When we had to change a function or fix a bug, we didn't have to worry about disrupting the source code of another function that dealt with a separate concern.

We did not have to apply LSP or DIP because there was no inheritance or polymorphism involved.


2. Any surprises or things that you did not expect?

Some of the main surprises that we ran into was setting up the module-info for each class and using dependencies to dynamically implementing interface. This was something we had not encountered previously and there was a learning curve that we ran into.

Also we ran into a issue where we were not aware of how we would test a main function since the function does not return anything that can be checked with unit testing.

3. What design patterns did you use in this assignment? Discuss.

We used factory pattern in this assignment. We create the objects without exposing the creation logic to the user/client and refer to newly created object using a common interface.

We created a Criteria interface and concrete classes implementing the Criteria interface. We then defined another class Application Evaluator as out factory class.

App class, in evaluato.ui contains the main. This class uses ApplicationEvaluator to get a Criteria Object using the ServiceLoader.

We used this pattern so that we can create an object, allowing users to create objects in such a way that it doesn't have tight coupling with the class hierarchy.

It also lets us honor the OCP principle as we can add as many modules and implementations of the Criteria interface and use that service from the client by loading all the services through ServiceLoader.